name: Deploy To Prod

on:
  push:
    branches:
      - prod

env:
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu:24.04
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH with a passphrase
        env:
          SSH_PASSPHRASE: ${{secrets.SSH_KEY_PASSPHRASE}}
          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          echo "echo $SSH_PASSPHRASE" > ~/.ssh_askpass && chmod +x ~/.ssh_askpass
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | DISPLAY=None SSH_ASKPASS=~/.ssh_askpass ssh-add - >/dev/null

      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USERNAME }}@${{ secrets.REMOTE_SERVER_IP }} "echo 'SSH connection successful'"
        shell: bash

      - name: Get Git Revision Count
        id: revision
        run: echo "REVISION=$(git rev-list --count origin/prod)" >> $GITHUB_ENV

      - name: Build Docker Images
        run: |
          docker build --platform linux/arm64 -f Dockerfile.prod.host -t host:${{ env.REVISION }} .
          docker build --platform linux/arm64 -f Dockerfile.prod.catalog -t catalog:${{ env.REVISION }} .
          docker build --platform linux/arm64 -f Dockerfile.prod.shopping -t shopping:${{ env.REVISION }} .

      - name: Save Docker Images
        run: |
          docker save -o host-${{ env.REVISION }}.tar host:${{ env.REVISION }}
          docker save -o catalog-${{ env.REVISION }}.tar catalog:${{ env.REVISION }}
          docker save -o shopping-${{ env.REVISION }}.tar shopping:${{ env.REVISION }}

      - name: Transfer Images to Server
        run: |
          set -e
          scp -o StrictHostKeyChecking=no host-${{ env.REVISION }}.tar catalog-${{ env.REVISION }}.tar shopping-${{ env.REVISION }}.tar ${{ secrets.REMOTE_USERNAME }}@${{ secrets.REMOTE_SERVER_IP }}:/home/dev/app/tar

      - name: Load Images and Deploy Stack
        run: |
          set -e
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USERNAME }}@${{ secrets.REMOTE_SERVER_IP }} << EOF
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker load -i /home/dev/app/tar/host-${{ env.REVISION }}.tar
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker load -i /home/dev/app/tar/catalog-${{ env.REVISION }}.tar
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker load -i /home/dev/app/tar/shopping-${{ env.REVISION }}.tar

          sed -i "s|image: host:.*|image: host:${{ env.REVISION }}|" /home/dev/app/docker-compose.yaml
          sed -i "s|image: catalog:.*|image: catalog:${{ env.REVISION }}|" /home/dev/app/docker-compose.yaml
          sed -i "s|image: shopping:.*|image: shopping:${{ env.REVISION }}|" /home/dev/app/docker-compose.yaml

          cd /home/dev/app
          echo "${{ secrets.SUDO_PASSWORD }}" | docker compose down
          echo "${{ secrets.SUDO_PASSWORD }}" | docker compose up -d

          # Cleanup
          rm /home/dev/app/tar/*.tar
          EOF
